# Generated from ../Grammar/Esperados.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,300,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,4,23,236,
        8,23,11,23,12,23,237,1,24,1,24,4,24,242,8,24,11,24,12,24,243,1,24,
        1,24,1,25,4,25,249,8,25,11,25,12,25,250,1,25,1,25,4,25,255,8,25,
        11,25,12,25,256,1,26,4,26,260,8,26,11,26,12,26,261,1,27,1,27,1,27,
        1,27,5,27,268,8,27,10,27,12,27,271,9,27,1,27,1,27,1,28,1,28,1,28,
        1,28,5,28,279,8,28,10,28,12,28,282,9,28,1,28,1,28,1,28,1,28,1,28,
        1,29,4,29,290,8,29,11,29,12,29,291,1,29,1,29,1,30,3,30,297,8,30,
        1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,6,1,
        0,48,57,4,0,32,32,48,57,65,90,97,122,3,0,48,57,65,90,97,122,2,0,
        10,10,13,13,2,0,58,58,80,80,3,0,9,10,13,13,32,32,308,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,
        1,0,0,0,3,71,1,0,0,0,5,77,1,0,0,0,7,84,1,0,0,0,9,93,1,0,0,0,11,101,
        1,0,0,0,13,108,1,0,0,0,15,117,1,0,0,0,17,125,1,0,0,0,19,132,1,0,
        0,0,21,139,1,0,0,0,23,149,1,0,0,0,25,151,1,0,0,0,27,153,1,0,0,0,
        29,158,1,0,0,0,31,166,1,0,0,0,33,172,1,0,0,0,35,181,1,0,0,0,37,188,
        1,0,0,0,39,198,1,0,0,0,41,211,1,0,0,0,43,227,1,0,0,0,45,231,1,0,
        0,0,47,235,1,0,0,0,49,239,1,0,0,0,51,248,1,0,0,0,53,259,1,0,0,0,
        55,263,1,0,0,0,57,274,1,0,0,0,59,289,1,0,0,0,61,296,1,0,0,0,63,64,
        5,83,0,0,64,65,5,97,0,0,65,66,5,108,0,0,66,67,5,117,0,0,67,68,5,
        116,0,0,68,69,5,111,0,0,69,70,5,110,0,0,70,2,1,0,0,0,71,72,5,65,
        0,0,72,73,5,100,0,0,73,74,5,105,0,0,74,75,5,97,0,0,75,76,5,117,0,
        0,76,4,1,0,0,0,77,78,5,115,0,0,78,79,5,107,0,0,79,80,5,114,0,0,80,
        81,5,105,0,0,81,82,5,98,0,0,82,83,5,105,0,0,83,6,1,0,0,0,84,85,5,
        118,0,0,85,86,5,97,0,0,86,87,5,114,0,0,87,88,5,105,0,0,88,89,5,97,
        0,0,89,90,5,98,0,0,90,91,5,108,0,0,91,92,5,111,0,0,92,8,1,0,0,0,
        93,94,5,97,0,0,94,95,5,115,0,0,95,96,5,105,0,0,96,97,5,103,0,0,97,
        98,5,105,0,0,98,99,5,110,0,0,99,100,5,105,0,0,100,10,1,0,0,0,101,
        102,5,97,0,0,102,103,5,108,0,0,103,104,5,100,0,0,104,105,5,111,0,
        0,105,106,5,110,0,0,106,107,5,105,0,0,107,12,1,0,0,0,108,109,5,115,
        0,0,109,110,5,117,0,0,110,111,5,98,0,0,111,112,5,116,0,0,112,113,
        5,114,0,0,113,114,5,97,0,0,114,115,5,104,0,0,115,116,5,105,0,0,116,
        14,1,0,0,0,117,118,5,109,0,0,118,119,5,117,0,0,119,120,5,108,0,0,
        120,121,5,116,0,0,121,122,5,105,0,0,122,123,5,103,0,0,123,124,5,
        105,0,0,124,16,1,0,0,0,125,126,5,100,0,0,126,127,5,105,0,0,127,128,
        5,118,0,0,128,129,5,105,0,0,129,130,5,100,0,0,130,131,5,105,0,0,
        131,18,1,0,0,0,132,133,5,109,0,0,133,134,5,111,0,0,134,135,5,100,
        0,0,135,136,5,117,0,0,136,137,5,108,0,0,137,138,5,111,0,0,138,20,
        1,0,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,142,5,116,0,0,142,
        143,5,101,0,0,143,144,5,110,0,0,144,145,5,115,0,0,145,146,5,105,
        0,0,146,147,5,103,0,0,147,148,5,105,0,0,148,22,1,0,0,0,149,150,5,
        40,0,0,150,24,1,0,0,0,151,152,5,41,0,0,152,26,1,0,0,0,153,154,5,
        118,0,0,154,155,5,101,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,
        28,1,0,0,0,158,159,5,109,0,0,159,160,5,97,0,0,160,161,5,108,0,0,
        161,162,5,118,0,0,162,163,5,101,0,0,163,164,5,114,0,0,164,165,5,
        111,0,0,165,30,1,0,0,0,166,167,5,101,0,0,167,168,5,103,0,0,168,169,
        5,97,0,0,169,170,5,108,0,0,170,171,5,97,0,0,171,32,1,0,0,0,172,173,
        5,110,0,0,173,174,5,101,0,0,174,175,5,32,0,0,175,176,5,101,0,0,176,
        177,5,103,0,0,177,178,5,97,0,0,178,179,5,108,0,0,179,180,5,97,0,
        0,180,34,1,0,0,0,181,182,5,103,0,0,182,183,5,114,0,0,183,184,5,97,
        0,0,184,185,5,110,0,0,185,186,5,100,0,0,186,187,5,97,0,0,187,36,
        1,0,0,0,188,189,5,109,0,0,189,190,5,97,0,0,190,191,5,108,0,0,191,
        192,5,103,0,0,192,193,5,114,0,0,193,194,5,97,0,0,194,195,5,110,0,
        0,195,196,5,100,0,0,196,197,5,97,0,0,197,38,1,0,0,0,198,199,5,103,
        0,0,199,200,5,114,0,0,200,201,5,97,0,0,201,202,5,110,0,0,202,203,
        5,100,0,0,203,204,5,97,0,0,204,205,5,32,0,0,205,206,5,101,0,0,206,
        207,5,103,0,0,207,208,5,97,0,0,208,209,5,108,0,0,209,210,5,97,0,
        0,210,40,1,0,0,0,211,212,5,109,0,0,212,213,5,97,0,0,213,214,5,108,
        0,0,214,215,5,103,0,0,215,216,5,114,0,0,216,217,5,97,0,0,217,218,
        5,110,0,0,218,219,5,100,0,0,219,220,5,97,0,0,220,221,5,32,0,0,221,
        222,5,101,0,0,222,223,5,103,0,0,223,224,5,97,0,0,224,225,5,108,0,
        0,225,226,5,97,0,0,226,42,1,0,0,0,227,228,5,107,0,0,228,229,5,97,
        0,0,229,230,5,106,0,0,230,44,1,0,0,0,231,232,5,97,0,0,232,233,5,
        117,0,0,233,46,1,0,0,0,234,236,7,0,0,0,235,234,1,0,0,0,236,237,1,
        0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,48,1,0,0,0,239,241,5,34,
        0,0,240,242,7,1,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,
        0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,5,34,0,0,246,50,1,0,
        0,0,247,249,7,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,
        0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,254,5,46,0,0,253,255,7,0,
        0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,
        0,0,257,52,1,0,0,0,258,260,7,2,0,0,259,258,1,0,0,0,260,261,1,0,0,
        0,261,259,1,0,0,0,261,262,1,0,0,0,262,54,1,0,0,0,263,264,5,58,0,
        0,264,265,5,79,0,0,265,269,1,0,0,0,266,268,8,3,0,0,267,266,1,0,0,
        0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,
        0,271,269,1,0,0,0,272,273,6,27,0,0,273,56,1,0,0,0,274,275,5,58,0,
        0,275,276,5,80,0,0,276,280,1,0,0,0,277,279,8,4,0,0,278,277,1,0,0,
        0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,
        0,282,280,1,0,0,0,283,284,5,80,0,0,284,285,5,58,0,0,285,286,1,0,
        0,0,286,287,6,28,0,0,287,58,1,0,0,0,288,290,7,5,0,0,289,288,1,0,
        0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,293,1,0,
        0,0,293,294,6,29,0,0,294,60,1,0,0,0,295,297,5,13,0,0,296,295,1,0,
        0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,10,0,0,299,62,1,0,
        0,0,10,0,237,243,250,256,261,269,280,291,296,1,6,0,0
    ]

class EsperadosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    GREETING = 1
    GOODBYE = 2
    PRINT = 3
    VARDEF = 4
    ASS = 5
    ADD = 6
    SUB = 7
    MULT = 8
    DIV = 9
    MOD = 10
    EXPON = 11
    LP = 12
    RP = 13
    TRUE = 14
    FALSE = 15
    EQUAL = 16
    INEQUAL = 17
    GREATER = 18
    LESS = 19
    EGREATER = 20
    ELESS = 21
    AND = 22
    OR = 23
    INT = 24
    STRING = 25
    FLOAT = 26
    NAME = 27
    COMMENT = 28
    COMMENTBLOCK = 29
    WS = 30
    NL = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Saluton'", "'Adiau'", "'skribi'", "'variablo'", "'asigini'", 
            "'aldoni'", "'subtrahi'", "'multigi'", "'dividi'", "'modulo'", 
            "'intensigi'", "'('", "')'", "'vere'", "'malvero'", "'egala'", 
            "'ne egala'", "'granda'", "'malgranda'", "'granda egala'", "'malgranda egala'", 
            "'kaj'", "'au'" ]

    symbolicNames = [ "<INVALID>",
            "GREETING", "GOODBYE", "PRINT", "VARDEF", "ASS", "ADD", "SUB", 
            "MULT", "DIV", "MOD", "EXPON", "LP", "RP", "TRUE", "FALSE", 
            "EQUAL", "INEQUAL", "GREATER", "LESS", "EGREATER", "ELESS", 
            "AND", "OR", "INT", "STRING", "FLOAT", "NAME", "COMMENT", "COMMENTBLOCK", 
            "WS", "NL" ]

    ruleNames = [ "GREETING", "GOODBYE", "PRINT", "VARDEF", "ASS", "ADD", 
                  "SUB", "MULT", "DIV", "MOD", "EXPON", "LP", "RP", "TRUE", 
                  "FALSE", "EQUAL", "INEQUAL", "GREATER", "LESS", "EGREATER", 
                  "ELESS", "AND", "OR", "INT", "STRING", "FLOAT", "NAME", 
                  "COMMENT", "COMMENTBLOCK", "WS", "NL" ]

    grammarFileName = "Esperados.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


