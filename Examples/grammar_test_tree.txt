<<<<<<< HEAD
(program Saluton (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "wpisz cos: "))))))))) )))
(action (inputExpr variablo k asigini inputo ( )))
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom k))))))))) )))
(action (variableExpr variablo x (type entjero) asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 2)))))))))))
=======
(program Saluton (instructions (action (variableExpr variablo x (type entjero) asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 0)))))))))))
>>>>>>> main
(action (variableExpr variablo y (type flosi) asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1.5)))))))))))
(action (variableExpr variablo tekst (type snuro) asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Cze��")))))))))))
(action (variableExpr tutmonda variablo licznik (type entjero) asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 10)))))))))))
<<<<<<< HEAD
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Witaj "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom tekst))))))))) )))
(action (forLoop por ( i ; 0 ; 5 ; 1 ) { (loopInstructions (loopAction (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Iteracja:"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) ))))
(loopAction (action (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) granda egala (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i jest wieksze lub rowne 2"))))))))) )))) })
(elifExpr alie se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) ne egala (additionExpr (multiExpr (exponExpr (atom 1))))))))) ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i nie jest rowne 1"))))))))) )))) })
(elseExpr alie { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i to 1"))))))))) )))) }))))
(loopAction (action (whileLoop gis ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) malgranda (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (loopInstructions (loopAction (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Petla while, i ="))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) ))))
(loopAction haltu)) })))
(loopAction daurigi)) }))
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Koniec petli"))))))))) )))
(action (functionDef difini salutu ( (parameters (type snuro) : nomo) ) { (funDefInstructions (funDefAction (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Saluton: "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom nomo))))))))) ))))
(funDefAction (returnStmt reveni))
(funDefAction (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Lol"))))))))) ))))) }))
(action (functionCall funcio salutu ( nomo = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Jol"))))))))) )))
(action (deleteStmt forigi x))
(action (defList variablo LISTA asigini [ (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 2))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom vere))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "lol"))))))))) ]))
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom LISTA))))))))) )))
=======
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Witaj"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom tekst))))))))) )))
(action (forLoop por ( i ; 0 ; 5 ; 1 ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Iteracja:"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) )))
(action (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) granda egala (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i jest wi�ksze lub r�wne 2"))))))))) )))) })
(elifExpr alie se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) ne egala (additionExpr (multiExpr (exponExpr (atom 1))))))))) ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i nie jest r�wne 1"))))))))) )))) })
(elseExpr alie { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i to 1"))))))))) )))) })))
(action (whileLoop gis ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) malgranda (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (instructions (action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "P�tla while, i ="))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) )))
(action haltu)) }))
(action daurigi)) }))
(action (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Koniec p�tli"))))))))) )))
>>>>>>> main
(goodbye Adiau <EOF>)) <EOF>)