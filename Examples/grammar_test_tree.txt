(program Saluton (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "wpisz cos: "))))))))) )))
(instructions (variableExpr variablo k asigini inputo ( )))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom k))))))))) )))
(instructions (variableExpr variablo (type entjero) x asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 2)))))))))))
(instructions (variableExpr variablo (type flosi) y asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1.5)))))))))))
(instructions (variableExpr variablo (type snuro) tekst asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Czesc")))))))))))
(instructions (variableExpr tutmonda variablo (type entjero) licznik asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 10)))))))))))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Witaj "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom tekst))))))))) )))
(instructions (forLoop por ( i ; 0 ; 5 ; 1 ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Iteracja:"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) ))))
(actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) granda egala (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i jest wieksze lub rowne 2"))))))))) )))) })
(elifExpr alie se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) ne egala (additionExpr (multiExpr (exponExpr (atom 1))))))))) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i nie jest rowne 1"))))))))) )))) })
(elseExpr alie { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "i to 1"))))))))) )))) }))))
(actions (instructions (whileLoop gis ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i)))) malgranda (additionExpr (multiExpr (exponExpr (atom 2))))))))) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Petla while, i ="))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom i))))))))) ))))
(actions haltu) })))
(actions daurigi) }))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Koniec petli"))))))))) )))
(instructions (functionDef difini salutu ( (parameters (type snuro) : nomo) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Saluton: "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom nomo))))))))) ))))
(actions (instructions (returnStmt reveni)))
(actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Lol"))))))))) )))) }))
(instructions (functionCall funcio salutu ( nomo = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom k))))))))) )))
(instructions (deleteStmt forigi x))
(instructions (defList variablo listo lista asigini [ (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 2))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom vere))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "lol"))))))))) ]))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom lista))))))))) ))) Adiau <EOF>)