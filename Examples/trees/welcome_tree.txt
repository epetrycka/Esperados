(program skipBefore Saluton (instructions (defList variablo listo Lista asigini [ ]))
(instructions (whileLoop gis ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom vere))))))))) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Podaj imie: "))))))))) ))))
(actions (instructions (variableExpr variablo text asigini inputo ( ))))
(actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom text)))) egala (additionExpr (multiExpr (exponExpr (atom "0"))))))))) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Koniec listy"))))))))) ))))
(actions haltu) }))))
(actions (instructions (addToList Lista aldoni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom text)))))))))))) }))
(instructions (functionDef difini salutu ( (parameters names) ) { (actions (instructions (forEachLoop por ciu name en names { (actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom names)))) egala (additionExpr (multiExpr (exponExpr (atom ""))))))))) ) { (actions (instructions (returnStmt reveni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom malvero)))))))))))) })
(elseExpr alie { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Saluton: "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom name))))))))) )))) })))) }))) }))
(instructions (functionCall funcio salutu ( names = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom Lista))))))))) ))) Adiau skipAfter <EOF>)