(program skipBefore Saluton (instructions (defList tutmonda variablo listo lista asigini [ (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "hej"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 2))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "cos"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom vere))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 0))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 5))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom malvero))))))))) ]))
(instructions (functionDef difini zapisz ( (parameters lista) ) { (actions (instructions (forEachLoop por ciu item en lista { (actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr ne (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom item)))))))))) ) { (actions (instructions (returnStmt reveni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom item)))))))))))) })))) }))) }))
(instructions (variableExpr tutmonda variablo result asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom (functionCall funcio zapisz ( lista = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom lista))))))))) )))))))))))))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom result))))))))) ))) Adiau skipAfter <EOF>)