(program Saluton (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "hej"))))))))) )))
(instructions (functionDef difini salutu ( (parameters nomo) ) { (actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Saluton: "))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom nomo))))))))) ))))
(actions (instructions (functionDef difini name ( (parameters name2) ) { (actions (instructions (variableExpr variablo y asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 5))))))))))))
(actions (instructions (returnStmt reveni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom " Hej "))) aldoni (multiExpr (exponExpr (atom name2))))))))) ))))))))))))) })))
(actions (instructions (variableExpr variablo name asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom (functionCall funcio name ( name2 = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Aha"))))))))) ))))))))))))))
(actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Lol"))))))))) , (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom name))))))))) )))) }))
(instructions (functionCall funcio salutu ( nomo = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom "Jol"))))))))) )))
(instructions (functionDef difini test ( (parameters n) ) { (actions (instructions (variableExpr variablo x asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n))))))))))))
(actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n)))) granda (additionExpr (multiExpr (exponExpr (atom 0))))))))) ) { (actions (instructions (functionCall funcio test ( n = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n))) subtrahi (multiExpr (exponExpr (atom 1))))))))) )))) }))))
(actions (instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom x))))))))) )))) }))
(instructions (functionCall funcio test ( n = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 5))))))))) )))
(instructions (functionDef difini silnia ( (parameters n) ) { (actions (instructions (condition (ifExpr se ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n)))) egala (additionExpr (multiExpr (exponExpr (atom 0))))))))) ) { (actions (instructions (returnStmt reveni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 1)))))))))))) })
(elseExpr alie { (actions (instructions (returnStmt reveni (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n)) multigi (exponExpr (atom (functionCall funcio silnia ( n = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom n))) subtrahi (multiExpr (exponExpr (atom 1))))))))) )))))))))))))) })))) }))
(instructions (variableExpr variablo wynik asigini (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom (functionCall funcio silnia ( n = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 5))))))))) , n = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 7))))))))) , i = (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom 70))))))))) )))))))))))))
(instructions (printExpr skribi ( (expr (orExpr (andExpr (notExpr (comparisonExpr (additionExpr (multiExpr (exponExpr (atom wynik))))))))) ))) Adiau <EOF>)